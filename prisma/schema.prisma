generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model api_usage {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  endpoint        String       @db.VarChar(255)
  usage_count     Int
  organisation_id String       @db.Uuid
  organisation    organisation @relation(fields: [organisation_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model contract {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title           String       @db.VarChar(255)
  content         String
  organisation_id String       @db.Uuid
  organisation    organisation @relation(fields: [organisation_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model invoice {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  invoice_number  String       @db.VarChar(255)
  amount          Int
  status          String       @db.VarChar(255)
  organisation_id String       @db.Uuid
  organisation    organisation @relation(fields: [organisation_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  payment         payment[]
}

model organisation {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String              @db.VarChar(255)
  user_id           String              @db.Uuid
  api_usage         api_usage[]
  contract          contract[]
  invoice           invoice[]
  user              user                @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  report            report[]
  user_organisation user_organisation[]
}

model payment {
  id         String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  amount     Int
  status     String  @db.VarChar(255)
  invoice_id String  @db.Uuid
  invoice    invoice @relation(fields: [invoice_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model report {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title           String       @db.VarChar(255)
  data            String
  organisation_id String       @db.Uuid
  organisation    organisation @relation(fields: [organisation_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email             String              @unique @db.VarChar(255)
  firstName         String?             @db.VarChar(255)
  lastName          String?             @db.VarChar(255)
  roq_user_id       String              @db.VarChar(255)
  tenant_id         String              @db.VarChar(255)
  organisation      organisation[]
  user_organisation user_organisation[]
}

model user_organisation {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String       @db.Uuid
  organisation_id String       @db.Uuid
  organisation    organisation @relation(fields: [organisation_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user            user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
